plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

if (System.getenv('MOD_VERSION') != null) {
	mod_version = System.getenv('MOD_VERSION')
}
version = mod_version

base {
	archivesName = mod_id + "-" + minecraft_version
}


java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

	mappings channel: mapping_channel, version: mapping_version

	//accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')
			args '--username', 'OccultismKubeJS'
			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			//Fix for patchouli mixin crash
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			// enable using JBR to hotswap MOAR
			// also ignore the option if someone isnt using JBR
			jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			//Workaround for patchouli mixin crash
			property 'mixin.env.disableRefMap', 'true'

			// enable using JBR to hotswap MOAR
			// also ignore the option if someone isnt using JBR
			jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			//Workaround for patchouli mixin crash
			property 'mixin.env.disableRefMap', 'true'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', '${mod_id}', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
		content {
			includeGroup "com.klikli_dev"
		}
	}
	maven {
		name = "JEI"
		url = 'https://maven.blamejared.com/'
		content {
			includeGroup "mezz.jei"
		}
	}
	maven {
		name = "Curios Maven"
		url = "https://maven.theillusivec4.top/"
		content {
			includeGroup "top.theillusivec4.curios"
		}
	}
	maven {
		name = "Geckolib Maven"
		url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
		content {
			includeGroup "software.bernie.geckolib"
		}
	}
	maven {
		name = "SBL Maven"
		url "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
		content {
			includeGroup "net.tslat.smartbrainlib"
		}
	}
	maven {
		// Shedaniel's maven (Architectury API)
		url = "https://maven.architectury.dev"
		content {
			includeGroup "dev.architectury"
		}
	}

	maven {
		// saps.dev Maven (KubeJS and Rhino)
		url = "https://maven.saps.dev/releases"
		content {
			includeGroup "dev.latvian.mods"
		}
	}
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft "net.minecraftforge:forge:${forge_version}"

	implementation fg.deobf("com.klikli_dev:occultism-${minecraft_version}:${occultism_version}"){ transitive = false }
	//Occultism Transitive Dependencies
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}")
	runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
	runtimeOnly fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${smartbrainlib_minecraft_version}:${smartbrainlib_version}")
	runtimeOnly fg.deobf("com.klikli_dev:modonomicon-${minecraft_version}-forge:${modonomicon_version}")

	implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
	//KubeJS Transitive Dependencies
	implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
	implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

	//JEI for testing
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
}

processResources {
	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand project.properties
	}
}

java {
	withSourcesJar()
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : mod_id,
				"Specification-Vendor"    : mod_authors,
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : mod_version,
				"Implementation-Vendor"   : mod_authors,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()

			from components.java

			pom {
				name = mod_name
				description = "${mod_description}"
				url = 'https://github.com/klikli-dev/occultism-kubejs'
				licenses {
					license {
						name = 'MIT'
						url = 'https://github.com/klikli-dev/occultism-kubejs#licensing'
					}
				}
				scm {
					connection = 'scm:git:ssh:git@github.com:klikli-dev/occultism-kubejs.git'
					url = 'https://github.com/klikli-dev/occultism-kubejs'
				}
			}
		}
	}
	repositories {
		maven {
			name = "cloudsmith"
			url = "https://maven.cloudsmith.io/klikli-dev/mods/"
			def releasesRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
			def snapshotsRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = System.getenv('MAVEN_USER')
				password = System.getenv('MAVEN_PASS')
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}